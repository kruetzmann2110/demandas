// ========================================
// GERADOR DE PACOTE PARA PRODU√á√ÉO
// Sistema de Demandas Governan√ßa TOP v2.0.1
// ========================================

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

console.log('üì¶ GERANDO PACOTE PARA PRODU√á√ÉO...\n');

class ProductionPackager {
    constructor() {
        this.baseDir = path.join(__dirname, '..');
        this.outputDir = path.join(this.baseDir, 'dist-producao');
        this.zipFile = `sistema-demandas-producao-${this.getTimestamp()}.zip`;
        
        // Lista de arquivos essenciais para produ√ß√£o
        this.arquivosEssenciais = [
            // Arquivos principais
            'startup-with-updates.js',
            'INICIAR-COM-GITHUB.bat',
            'package.json',
            'README.md',
            'version.json',
            
            // Scripts de sistema
            'scripts/github-update-system.js',
            'scripts/corporate-downloader.js',
            'scripts/preparar-producao.js',
            
            // Backend
            'backend/server.js',
            'backend/users-auth.json',
            
            // Frontend
            'web/index.html',
            'web/js/app.js',
            'web/css/style.css',
            
            // Releases e configura√ß√£o
            'releases/versao.json',
            
            // Scripts de teste e corre√ß√£o
            'TESTAR-CONECTIVIDADE-CORPORATIVA.bat',
            'CORRIGIR-PRODUCAO.bat',
            'INSTALAR-SISTEMA-COMPLETO.bat',
            'diagnostico-producao.js',
            
            // Documenta√ß√£o
            'docs/instalacao.md',
            'SOLUCAO-PRODUCAO.md',
            'SOLUCAO-CORPORATIVA.md',
            
            // Configura√ß√£o
            '.gitignore'
        ];
        
        // Arquivos opcionais (incluir se existirem)
        this.arquivosOpcionais = [
            'config/database.json',
            'config/auth.json',
            'web/js/dashboard.js',
            'web/css/dashboard.css',
            'scripts/verificar-atualizacoes.js'
        ];
    }
    
    getTimestamp() {
        const now = new Date();
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const day = String(now.getDate()).padStart(2, '0');
        const hour = String(now.getHours()).padStart(2, '0');
        const minute = String(now.getMinutes()).padStart(2, '0');
        
        return `${year}${month}${day}-${hour}${minute}`;
    }
    
    async criarDiretorioTemp() {
        console.log('üìÅ Criando diret√≥rio tempor√°rio...');
        
        if (fs.existsSync(this.outputDir)) {
            this.removerDiretorio(this.outputDir);
        }
        
        fs.mkdirSync(this.outputDir, { recursive: true });
        console.log(`‚úÖ Diret√≥rio criado: ${this.outputDir}`);
    }
    
    removerDiretorio(dir) {
        if (fs.existsSync(dir)) {
            fs.readdirSync(dir).forEach((file) => {
                const curPath = path.join(dir, file);
                if (fs.lstatSync(curPath).isDirectory()) {
                    this.removerDiretorio(curPath);
                } else {
                    fs.unlinkSync(curPath);
                }
            });
            fs.rmdirSync(dir);
        }
    }
    
    async copiarArquivos() {
        console.log('\nüìã COPIANDO ARQUIVOS ESSENCIAIS:\n');
        
        let arquivosCopiados = 0;
        let arquivosFaltando = [];
        
        // Copiar arquivos essenciais
        for (const arquivo of this.arquivosEssenciais) {
            const origem = path.join(this.baseDir, arquivo);
            const destino = path.join(this.outputDir, arquivo);
            
            if (fs.existsSync(origem)) {
                // Criar diret√≥rio se necess√°rio
                const destinoDir = path.dirname(destino);
                if (!fs.existsSync(destinoDir)) {
                    fs.mkdirSync(destinoDir, { recursive: true });
                }
                
                // Copiar arquivo
                fs.copyFileSync(origem, destino);
                
                const stats = fs.statSync(destino);
                const tamanho = (stats.size / 1024).toFixed(1);
                console.log(`‚úÖ ${arquivo} (${tamanho} KB)`);
                arquivosCopiados++;
                
            } else {
                console.log(`‚ùå ${arquivo} - N√ÉO ENCONTRADO`);
                arquivosFaltando.push(arquivo);
            }
        }
        
        // Copiar arquivos opcionais
        console.log('\nüìã COPIANDO ARQUIVOS OPCIONAIS:\n');
        
        for (const arquivo of this.arquivosOpcionais) {
            const origem = path.join(this.baseDir, arquivo);
            const destino = path.join(this.outputDir, arquivo);
            
            if (fs.existsSync(origem)) {
                const destinoDir = path.dirname(destino);
                if (!fs.existsSync(destinoDir)) {
                    fs.mkdirSync(destinoDir, { recursive: true });
                }
                
                fs.copyFileSync(origem, destino);
                
                const stats = fs.statSync(destino);
                const tamanho = (stats.size / 1024).toFixed(1);
                console.log(`‚úÖ ${arquivo} (${tamanho} KB)`);
                arquivosCopiados++;
                
            } else {
                console.log(`‚ö†Ô∏è ${arquivo} - OPCIONAL, N√ÉO ENCONTRADO`);
            }
        }
        
        return { arquivosCopiados, arquivosFaltando };
    }
    
    async criarArquivoInstalacao() {
        console.log('\nüìÑ Criando arquivo de instru√ß√µes de instala√ß√£o...');
        
        const instrucoes = `
========================================
üì¶ PACOTE DE PRODU√á√ÉO - SISTEMA DE DEMANDAS
========================================

üéØ VERS√ÉO: 2.0.1 - Otimizada para ambiente corporativo
üìÖ GERADO EM: ${new Date().toLocaleString('pt-BR')}

üöÄ INSTALA√á√ÉO R√ÅPIDA:

1Ô∏è‚É£ EXTRAIR ARQUIVOS:
   ‚Ä¢ Extraia todos os arquivos para uma pasta (ex: C:\\SistemaDemandas)

2Ô∏è‚É£ INSTALAR NODE.JS:
   ‚Ä¢ Baixe e instale Node.js LTS: https://nodejs.org
   ‚Ä¢ Reinicie o computador ap√≥s instala√ß√£o

3Ô∏è‚É£ INSTALAR DEPEND√äNCIAS:
   ‚Ä¢ Abra CMD na pasta extra√≠da
   ‚Ä¢ Execute: npm install express mssql

4Ô∏è‚É£ INICIAR SISTEMA:
   ‚Ä¢ Duplo clique em: INICIAR-COM-GITHUB.bat
   ‚Ä¢ Ou execute: node startup-with-updates.js

üîß RESOLU√á√ÉO DE PROBLEMAS:

‚Ä¢ ERRO DE CERTIFICADO SSL:
  - Execute: TESTAR-CONECTIVIDADE-CORPORATIVA.bat
  - O sistema usa fallback autom√°tico para curl/PowerShell

‚Ä¢ ARQUIVOS FALTANDO:
  - Execute: CORRIGIR-PRODUCAO.bat
  - Ou execute: diagnostico-producao.js

‚Ä¢ INSTALA√á√ÉO COMPLETA:
  - Execute: INSTALAR-SISTEMA-COMPLETO.bat

üìã ARQUIVOS INCLUSOS:

‚úÖ SISTEMA PRINCIPAL:
   ‚Ä¢ startup-with-updates.js (Sistema de inicializa√ß√£o)
   ‚Ä¢ INICIAR-COM-GITHUB.bat (Script de in√≠cio)
   ‚Ä¢ backend/server.js (Servidor principal)
   ‚Ä¢ web/* (Interface do usu√°rio)

‚úÖ AUTO-UPDATE:
   ‚Ä¢ scripts/github-update-system.js (Update padr√£o)
   ‚Ä¢ scripts/corporate-downloader.js (Fallback corporativo)
   ‚Ä¢ releases/versao.json (Controle de vers√£o)

‚úÖ FERRAMENTAS DE SUPORTE:
   ‚Ä¢ TESTAR-CONECTIVIDADE-CORPORATIVA.bat
   ‚Ä¢ CORRIGIR-PRODUCAO.bat
   ‚Ä¢ diagnostico-producao.js
   ‚Ä¢ INSTALAR-SISTEMA-COMPLETO.bat

‚úÖ DOCUMENTA√á√ÉO:
   ‚Ä¢ README.md (Documenta√ß√£o geral)
   ‚Ä¢ docs/instalacao.md (Guia de instala√ß√£o)
   ‚Ä¢ SOLUCAO-CORPORATIVA.md (Ambiente corporativo)

üåê ACESSO:
   ‚Ä¢ URL: http://localhost:3000
   ‚Ä¢ Dashboard: http://localhost:3000/index.html

üìû SUPORTE:
   ‚Ä¢ Email: fabiano.kruetzmann@telefonica.com
   ‚Ä¢ GitHub: https://github.com/kruetzmann2110/demandas/issues

========================================
‚úÖ SISTEMA PRONTO PARA PRODU√á√ÉO!
========================================
`;
        
        const arquivoInstrucoes = path.join(this.outputDir, 'INSTRUCOES-INSTALACAO.txt');
        fs.writeFileSync(arquivoInstrucoes, instrucoes);
        
        console.log(`‚úÖ Instru√ß√µes criadas: INSTRUCOES-INSTALACAO.txt`);
    }
    
    async criarZip() {
        console.log('\nüóúÔ∏è CRIANDO ARQUIVO ZIP...\n');
        
        return new Promise((resolve, reject) => {
            // Tentar usar PowerShell primeiro (mais compat√≠vel)
            const psCommand = `powershell -Command "Compress-Archive -Path '${this.outputDir}\\*' -DestinationPath '${path.join(this.baseDir, this.zipFile)}' -Force"`;
            
            exec(psCommand, (error, stdout, stderr) => {
                if (error) {
                    console.log('‚ö†Ô∏è PowerShell falhou, tentando tar...');
                    
                    // Fallback para tar (dispon√≠vel no Windows 10+)
                    const tarCommand = `tar -czf "${path.join(this.baseDir, this.zipFile)}" -C "${this.outputDir}" .`;
                    
                    exec(tarCommand, (tarError, tarStdout, tarStderr) => {
                        if (tarError) {
                            console.error('‚ùå Erro ao criar ZIP:', tarError.message);
                            reject(tarError);
                        } else {
                            console.log('‚úÖ ZIP criado com tar!');
                            resolve();
                        }
                    });
                } else {
                    console.log('‚úÖ ZIP criado com PowerShell!');
                    resolve();
                }
            });
        });
    }
    
    async verificarZip() {
        const zipPath = path.join(this.baseDir, this.zipFile);
        
        if (fs.existsSync(zipPath)) {
            const stats = fs.statSync(zipPath);
            const tamanhoMB = (stats.size / 1024 / 1024).toFixed(2);
            
            console.log(`\nüì¶ ARQUIVO ZIP CRIADO:`);
            console.log(`   üìÑ Nome: ${this.zipFile}`);
            console.log(`   üìÇ Local: ${zipPath}`);
            console.log(`   üìä Tamanho: ${tamanhoMB} MB`);
            
            return true;
        } else {
            console.log('\n‚ùå Arquivo ZIP n√£o foi criado!');
            return false;
        }
    }
    
    async limparTemp() {
        console.log('\nüßπ Limpando arquivos tempor√°rios...');
        this.removerDiretorio(this.outputDir);
        console.log('‚úÖ Limpeza conclu√≠da');
    }
    
    async gerarPacote() {
        try {
            console.log('========================================');
            console.log('üì¶ INICIANDO GERA√á√ÉO DO PACOTE');
            console.log('========================================\n');
            
            // 1. Criar diret√≥rio tempor√°rio
            await this.criarDiretorioTemp();
            
            // 2. Copiar arquivos
            const { arquivosCopiados, arquivosFaltando } = await this.copiarArquivos();
            
            // 3. Criar instru√ß√µes
            await this.criarArquivoInstalacao();
            
            // 4. Criar ZIP
            await this.criarZip();
            
            // 5. Verificar resultado
            const zipCriado = await this.verificarZip();
            
            // 6. Limpar tempor√°rios
            await this.limparTemp();
            
            // 7. Resumo final
            console.log('\n========================================');
            console.log('üéâ PACOTE DE PRODU√á√ÉO CONCLU√çDO!');
            console.log('========================================\n');
            
            console.log(`üìä ESTAT√çSTICAS:`);
            console.log(`   ‚Ä¢ Arquivos copiados: ${arquivosCopiados}`);
            console.log(`   ‚Ä¢ Arquivos faltando: ${arquivosFaltando.length}`);
            
            if (arquivosFaltando.length > 0) {
                console.log(`\n‚ö†Ô∏è ARQUIVOS FALTANDO:`);
                arquivosFaltando.forEach(arquivo => console.log(`   ‚Ä¢ ${arquivo}`));
            }
            
            if (zipCriado) {
                console.log(`\n‚úÖ PRONTO PARA DISTRIBUI√á√ÉO!`);
                console.log(`üì¶ Arquivo: ${this.zipFile}`);
                console.log(`üìã Inclui instru√ß√µes completas de instala√ß√£o`);
                console.log(`üè¢ Otimizado para ambiente corporativo`);
                console.log(`üîÑ Auto-update via GitHub com fallback`);
            } else {
                console.log(`\n‚ùå FALHA NA CRIA√á√ÉO DO ZIP`);
                console.log(`üìÅ Arquivos dispon√≠veis em: ${this.outputDir}`);
            }
            
            console.log(`\nüìû SUPORTE:`);
            console.log(`   üìß fabiano.kruetzmann@telefonica.com`);
            console.log(`   üêõ https://github.com/kruetzmann2110/demandas/issues`);
            
        } catch (error) {
            console.error('\nüí• ERRO DURANTE GERA√á√ÉO:', error.message);
            console.log('\nüîß A√á√ïES POSS√çVEIS:');
            console.log('   1. Verificar se todos os arquivos existem');
            console.log('   2. Executar como Administrador');
            console.log('   3. Verificar espa√ßo em disco');
            console.log('   4. Tentar novamente');
        }
    }
}

// ‚úÖ EXECUTAR SE CHAMADO DIRETAMENTE
if (require.main === module) {
    const packager = new ProductionPackager();
    packager.gerarPacote()
        .then(() => {
            console.log('\nüèÅ Processamento conclu√≠do!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('üí• Falha cr√≠tica:', error.message);
            process.exit(1);
        });
}

module.exports = ProductionPackager;